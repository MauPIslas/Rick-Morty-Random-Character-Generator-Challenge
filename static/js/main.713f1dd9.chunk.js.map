{"version":3,"sources":["components/Nav.js","components/querys/QueryChar.js","components/Card.js","components/ListChars.js","components/Message.js","components/CardChar.js","App.js","serviceWorker.js","index.js"],"names":["Nav","Barra","styled","section","_templateObject","react_default","a","createElement","id","alt","src","React","Component","QueryChar","gql","QueryChar_templateObject","Card","this","props","name","image","IDC","status","specie","gender","origin","location","type","moment","created","format","ListChars","chars","list","map","char","i","key","className","href","onClick","ReactDOM","render","components_Card","sapecie","document","getElementById","handleCLick","Message","message","varQ","characters","withApollo","_ref","client","x","Math","floor","random","query","variables","then","e","loading","character","data","push","parentNode","removeChild","species","components_ListChars","components_Message","ApolloClient","uri","App","react_apollo_esm","components_Nav","components_CardChar","Boolean","window","hostname","match","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.713f1dd9.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components'\n\nclass Nav extends React.Component {\n    \n    render(){\n        const Barra= styled.section`\n        height: 66px;\n        top: 0px;\n        right: 0px;\n        left: 0px;\n        display: flex;\n        background-color: rgb(31, 38, 45);\n        display: grid;\n        grid-template-columns: repeat(10, 1fr);\n        `\n\n        return(\n            <Barra>\n                <div id=\"blockdemyContainer\">\n\n                    <img id=\"blockdemyIMG\" alt=\"blockdemy\"src=\"https://ernestognw.github.io/rick-and-morty-random/static/media/logo-white.fab45c5f.svg\"></img>\n                </div>\n            </Barra>\n        );\n    }\n}\n\nexport default Nav;","import gql from 'graphql-tag';\n\nconst QueryChar = gql`query oneCharacter($id: ID = 4) {\n  character(id: $id) {\n    name\n    id\n    status\n    species\n    gender\n    type\n    created\n    origin{\n      name\n    }\n    location{\n      name\n    }\n    image\n  }\n}\n `\n\nexport default QueryChar;","import React from 'react';\nimport '../../node_modules/moment/moment'\nimport moment from '../../node_modules/moment/moment';\n\nclass Card extends React.Component {\n    render(){\n        return(\n            <div id=\"cards\">\n                <div id=\"imgCard\">\n                    <img id=\"imgChar\"alt={this.props.name} src= {this.props.image}></img>\n                </div>\n                <div id=\"dataCard\">\n                    <h2>{this.props.name}</h2>\n                    <p><span>Character ID:</span>   {this.props.IDC}</p>\n                    <hr></hr>\n                    <p><span>Status:</span>     {this.props.status}</p>\n                    <hr></hr>\n                    <p><span>Specie:</span>     {this.props.specie}</p>\n                    <hr></hr>\n                    <p><span>Gender:</span>     {this.props.gender}</p>\n                    <hr></hr>\n                    <p><span>Origin:</span>     {this.props.origin}</p>\n                    <hr></hr>\n                    <p><span>Location:</span>   {this.props.location}</p>\n                    <hr></hr>\n                    <p><span>Type:</span>       {this.props.type}</p>\n                    <hr></hr>\n                    <p><span>Created at:</span> {moment(this.props.created).format('MMM Do YYYY')}</p>\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Card;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Card from './Card';\n\nclass ListChars extends React.Component{\n    render(){\n        let chars = this.props.list;\n        const handleCLick = (i) =>{\n            ReactDOM.render(<Card   name= {chars[i].name} \n                                    image = {chars[i].image}\n                                    IDC = {chars[i].id}\n                                    status = {chars[i].status}\n                                    specie = {chars[i].sapecie}\n                                    gender = {chars[i].gender}\n                                    origin = {chars[i].origin.name}\n                                    location = {chars[i].location.name}\n                                    type = {chars[i].type}\n                                    created = {chars[i].created}\n                \n            />, document.getElementById('card'));\n\n        }\n        return chars.map( (char,i) => \n        <div key={char.id + 10} className=\"cardH\">\n            <div className=\"imgCardH\">\n                <img key={\"key\"+ char.id }className=\"imgCardH\"alt={char.name} src= {char.image}></img>\n            </div>\n            <div className=\"dataCardH\">\n                <p className=\"pCardH\"key={char.name}>{char.name}</p>\n                \n            </div>\n            <div className=\"buttonCardHContainer\">\n                <a href=\"#cardScroll\">\n                    <button key={char} id={i+1} className=\"buttonCardH\" onClick={()=> handleCLick(i)}>view</button>\n                </a>\n            </div>\n        </div>\n            );\n    }\n}\n\nexport default ListChars;","import React from 'react';\n\nclass Message extends React.Component{\n    render(){\n        return(\n                <h1>{this.props.message}</h1>\n        );\n    }\n}\n\nexport default Message;","import React from 'react';\nimport { withApollo } from 'react-apollo';\nimport ReactDOM from 'react-dom';\n\n\nimport QueryChar from './querys/QueryChar'\nimport Card from './Card';\nimport ListChars from './ListChars';\nimport Message from './Message';\n\n\n\n\nlet varQ = {\"id\": 1}\nlet characters = [];\nfunction CardChar({ client }) {\n  \n    const handleClick= () =>{\n    let x = Math.floor((Math.random() * 493) + 1);\n    varQ.id = x;\n    client.query({query: QueryChar, variables: varQ }).then(e => {\n        if(e.loading ===  false){\n          ReactDOM.render(<h1>Loading...</h1>,document.getElementById('card'));\n        }\n        let character = e.data.character;       \n        characters.push(character);\n    \n        if(document.getElementById('message')){\n        document.getElementById('message').parentNode.removeChild(document.getElementById('message'));\n        document.getElementById('messageH').parentNode.removeChild(document.getElementById('messageH'));\n        }\n        ReactDOM.render(<Card   name= {character.name}\n                                image = {character.image} \n                                IDC = {character.id}\n                                status = {character.status}\n                                specie = {character.species}\n                                gender = {character.gender}\n                                origin = {character.origin.name}\n                                location = {character.location.name}\n                                type = {character.type}\n                                created = {character.created}\n        />, document.getElementById('card'));\n\n        \n\n        \n\n        ReactDOM.render(<ListChars list= {characters}/>,document.getElementById('list'));\n    })}\n\n   \n    return (\n      \n      <div>\n      <scroll-container>\n      <scroll-page id=\"cardScroll\">\n      <div id=\"buttonSpace\">\n          <button onClick={handleClick} id=\"genButton\">Generate</button>\n      </div>\n      <div id=\"message\">\n        <Message message=\"No se ha generado nungún personaje.\"></Message>\n      </div>\n      <div id= \"card\"></div>\n      </scroll-page>       \n      <div id=\"history\">\n        <h2>History</h2>\n      </div>\n      <div id=\"messageH\">\n        <Message message=\"No hay historial.\"></Message>\n      </div>\n      <div id=\"list\"></div>\n      </scroll-container>\n    </div>\n\n    )\n  }\n\n  \n  \n  export default withApollo(CardChar);","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport Nav from './components/Nav';\nimport CardChar from './components/CardChar';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\"\n});\n\n\nfunction App() {\n  \n  return (\n    \n    <ApolloProvider client= {client}>\n      <div className=\"App\">\n        <div id=\"nav\">\n          <Nav></Nav>\n        </div>\n        <div id=\"main\">\n\n        <CardChar id=\"CardChar\"></CardChar>\n        </div>\n        \n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}