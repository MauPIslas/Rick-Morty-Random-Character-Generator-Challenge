{"version":3,"sources":["components/Nav.js","components/querys/QueryChar.js","components/Card.js","components/ListChars.js","components/Message.js","components/CardChar.js","App.js","serviceWorker.js","index.js"],"names":["Nav","Barra","styled","section","_templateObject","react_default","a","createElement","id","alt","src","React","Component","QueryChar","gql","QueryChar_templateObject","Cards","Card_templateObject","ImgCard","div","_templateObject2","ImgChar","img","_templateObject3","DataCard","_templateObject4","Card","this","props","name","image","IDC","status","specie","gender","origin","location","type","moment","created","format","CardHistory","ListChars_templateObject","ImgCardHContainer","ListChars_templateObject2","ImgCardHistory","ListChars_templateObject3","DataCardHistory","ListChars_templateObject4","PCardHistory","p","_templateObject5","ButtonCardHContainer","_templateObject6","Button","button","_templateObject7","theme","fg","bg","primary","ListChars","chars","list","map","char","i","key","href","onClick","ReactDOM","render","components_Card","sapecie","document","getElementById","handleCLick","Message","message","ButtonGenContainer","CardChar_templateObject","History","CardChar_templateObject2","ButtonGen","CardChar_templateObject3","varQ","characters","withApollo","_ref","client","styled_components_browser_esm","x","Math","floor","random","query","variables","then","e","loading","character","data","push","parentNode","removeChild","species","components_ListChars","components_Message","ApolloClient","uri","GlobalStyle","createGlobalStyle","App_templateObject","App","react_apollo_esm","className","components_Nav","components_CardChar","Boolean","window","hostname","match","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kiBA2BeA,mLArBP,IAAMC,EAAOC,IAAOC,QAATC,KAWX,OACIC,EAAAC,EAAAC,cAACN,EAAD,KACII,EAAAC,EAAAC,cAAA,OAAKC,GAAG,sBACJH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eAAeC,IAAI,YAAWC,IAAI,qGAjB5CC,IAAMC,uTCDxB,IAoBeC,QApBGC,GAAHC,spDCGf,IAAMC,EAAQd,IAAOC,QAAVc,KAeLC,EAAUhB,IAAOiB,IAAVC,KAgBPC,EAAUnB,IAAOoB,IAAVC,KAaPC,EAAWtB,IAAOiB,IAAVM,KAyDCC,mLAhCP,OACIrB,EAAAC,EAAAC,cAACS,EAAD,KACIX,EAAAC,EAAAC,cAACW,EAAD,KAEQb,EAAAC,EAAAC,cAACc,EAAD,CAASZ,IAAKkB,KAAKC,MAAMC,KAAMnB,IAAMiB,KAAKC,MAAME,SAGxDzB,EAAAC,EAAAC,cAACiB,EAAD,KACInB,EAAAC,EAAAC,cAAA,UAAKoB,KAAKC,MAAMC,MAChBxB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,6BAAH,MAAiCoB,KAAKC,MAAMG,KAC5C1B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,uBAAH,QAA6BoB,KAAKC,MAAMI,QACxC3B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,uBAAH,QAA6BoB,KAAKC,MAAMK,QACxC5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,uBAAH,QAA6BoB,KAAKC,MAAMM,QACxC7B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,uBAAH,QAA6BoB,KAAKC,MAAMO,QACxC9B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,yBAAH,MAA6BoB,KAAKC,MAAMQ,UACxC/B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,qBAAH,UAA6BoB,KAAKC,MAAMS,MACxChC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,2BAAH,IAA6B+B,IAAOX,KAAKC,MAAMW,SAASC,OAAO,yBAzBhE7B,IAAMC,w9CClEzB,IAAM6B,EAAcvC,IAAOiB,IAAVuB,KAYXC,EAAoBzC,IAAOiB,IAAVyB,KAQjBC,EAAiB3C,IAAOoB,IAAVwB,KAMdC,EAAkB7C,IAAOiB,IAAV6B,KAUfC,EAAe/C,IAAOgD,EAAVC,KAGZC,EAAuBlD,IAAOiB,IAAVkC,KAOpBC,EAASpD,IAAOqD,OAAVC,IACE,SAAA5B,GAAK,OAAIA,EAAM6B,MAAMC,IACjB,SAAA9B,GAAK,OAAIA,EAAM6B,MAAMC,IACvB,SAAA9B,GAAK,OAAIA,EAAM6B,MAAME,IAErB,SAAA/B,GAAK,OAAIA,EAAMgC,QAAU,cAAgB,SAC9C,SAAAhC,GAAK,OAAIA,EAAMgC,QAAU,qBAAuB,iBACzC,SAAAhC,GAAK,OAAIA,EAAMgC,QAAU,qBAAuB,kBAiDnDC,mLAnCP,IAAIC,EAAQnC,KAAKC,MAAMmC,KAgBvB,OAAOD,EAAME,IAAK,SAACC,EAAKC,GAAN,OAClB7D,EAAAC,EAAAC,cAACkC,EAAD,CAAa0B,IAAKF,EAAKzD,GAAK,IACxBH,EAAAC,EAAAC,cAACoC,EAAD,KACItC,EAAAC,EAAAC,cAACsC,EAAD,CAAgBsB,IAAK,MAAOF,EAAKzD,GAAIC,IAAKwD,EAAKpC,KAAMnB,IAAMuD,EAAKnC,SAEpEzB,EAAAC,EAAAC,cAACwC,EAAD,KACI1C,EAAAC,EAAAC,cAAC0C,EAAD,CAAckB,IAAKF,EAAKpC,MAAOoC,EAAKpC,OAGxCxB,EAAAC,EAAAC,cAAC6C,EAAD,KACI/C,EAAAC,EAAAC,cAAA,KAAG6D,KAAK,eACJ/D,EAAAC,EAAAC,cAAC+C,EAAD,CAAQM,SAAO,EAACO,IAAKF,EAAMzD,GAAI0D,EAAE,EAAGG,QAAS,kBA1BrC,SAACH,GACjBI,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,CAAQ3C,KAAOiC,EAAMI,GAAGrC,KAChBC,MAASgC,EAAMI,GAAGpC,MAClBC,IAAO+B,EAAMI,GAAG1D,GAChBwB,OAAU8B,EAAMI,GAAGlC,OACnBC,OAAU6B,EAAMI,GAAGO,QACnBvC,OAAU4B,EAAMI,GAAGhC,OACnBC,OAAU2B,EAAMI,GAAG/B,OAAON,KAC1BO,SAAY0B,EAAMI,GAAG9B,SAASP,KAC9BQ,KAAQyB,EAAMI,GAAG7B,KACjBE,QAAWuB,EAAMI,GAAG3B,UAExCmC,SAASC,eAAe,SAc8BC,CAAYV,KAA9D,oBA7BIvD,IAAMC,WC7DfiE,mLANP,OACQxE,EAAAC,EAAAC,cAAA,UAAKoB,KAAKC,MAAMkD,gBAHVnE,IAAMC,mwBCS5B,IAAMmE,EAAqB7E,IAAOiB,IAAV6D,KAIlBC,EAAU/E,IAAOiB,IAAV+D,KAKPC,EAAYjF,IAAOqD,OAAV6B,IACJ,SAAAxD,GAAK,OAAIA,EAAM6B,MAAMC,IACd,SAAA9B,GAAK,OAAIA,EAAM6B,MAAMC,IACvB,SAAA9B,GAAK,OAAIA,EAAM6B,MAAME,KAqB/BF,GAAQ,CACZC,GAAI,sBACJC,GAAI,kEAGF0B,GAAO,CAAC7E,GAAM,GACd8E,GAAa,GAkFAC,mBAjFjB,SAAAC,GAA8B,IAAVC,EAAUD,EAAVC,OAmDhB,OAEEpF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACEF,EAAAC,EAAAC,cAAA,eAAaC,GAAG,cACdH,EAAAC,EAAAC,cAACwE,EAAD,KACA1E,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAejC,MAAOA,IACpBpD,EAAAC,EAAAC,cAAC4E,EAAD,CAAWd,QAxDF,WACnB,IAAIsB,EAAIC,KAAKC,MAAuB,IAAhBD,KAAKE,SAAkB,GAEzCT,GAAK7E,GADJmF,EAAI,IACK,yBAA2BA,EAE3B,wBAA0BA,EAEtCF,EAAOM,MAAM,CAACA,MAAOlF,EAAWmF,UAAWX,KAAQY,KAAK,SAAAC,IAClC,IAAfA,EAAEC,SACH7B,IAASC,OAAOlE,EAAAC,EAAAC,cAAA,wBAAoBmE,SAASC,eAAe,SAE9D,IAAIyB,EAAYF,EAAEG,KAAKD,UACvBA,EAAU5F,GAAKmF,EACS,OAArBS,EAAUjE,SACXiE,EAAUjE,OAAS,CACjBN,KAAM,YAGgB,OAAvBuE,EAAUhE,WACXgE,EAAUhE,SAAW,CACnBP,KAAM,YAGVyD,GAAWgB,KAAKF,GAEb1B,SAASC,eAAe,aAC3BD,SAASC,eAAe,WAAW4B,WAAWC,YAAY9B,SAASC,eAAe,YAClFD,SAASC,eAAe,YAAY4B,WAAWC,YAAY9B,SAASC,eAAe,cAEnFL,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,CAAQ3C,KAAOuE,EAAUvE,KACjBC,MAASsE,EAAUtE,MACnBC,IAAOqE,EAAU5F,GACjBwB,OAAUoE,EAAUpE,OACpBC,OAAUmE,EAAUK,QACpBvE,OAAUkE,EAAUlE,OACpBC,OAAUiE,EAAUjE,OAAON,KAC3BO,SAAYgE,EAAUhE,SAASP,KAC/BQ,KAAQ+D,EAAU/D,KAClBE,QAAW6D,EAAU7D,UACzCmC,SAASC,eAAe,SAM5BL,IAASC,OAAOlE,EAAAC,EAAAC,cAACmG,EAAD,CAAW3C,KAAOuB,KAAcZ,SAASC,eAAe,YAWjCnE,GAAG,aAApC,cAGFH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAACoG,EAAD,CAAS7B,QAAQ,4CAEnBzE,EAAAC,EAAAC,cAAA,OAAKC,GAAI,UAEXH,EAAAC,EAAAC,cAAC0E,EAAD,KACE5E,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YACNH,EAAAC,EAAAC,cAACoG,EAAD,CAAS7B,QAAQ,uBAEnBzE,EAAAC,EAAAC,cAAA,OAAKC,GAAG,ugCCnHlB,IAAMiF,GAAS,IAAImB,IAAa,CAC9BC,IAAK,0DAGDC,GAAcC,YAAHC,MA4EFC,OAlBf,WAEE,OAEE5G,EAAAC,EAAAC,cAAC2G,EAAA,EAAD,CAAgBzB,OAASA,IACvBpF,EAAAC,EAAAC,cAACuG,GAAD,MACAzG,EAAAC,EAAAC,cAAA,OAAK4G,UAAU,OACb9G,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6G,EAAD,OAEF/G,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC8G,GAAD,CAAU7G,GAAG,iBCrED8G,QACW,cAA7BC,OAAOnF,SAASoF,UAEe,UAA7BD,OAAOnF,SAASoF,UAEhBD,OAAOnF,SAASoF,SAASC,MACvB,2DCbNnD,IAASC,OAAOlE,EAAAC,EAAAC,cAACmH,GAAD,MAAShD,SAASC,eAAe,SD4H3C,kBAAmBgD,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.8a455151.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components'\n\nclass Nav extends React.Component {\n    \n    render(){\n        const Barra= styled.section`\n        height: 66px;\n        top: 0px;\n        right: 0px;\n        left: 0px;\n        display: flex;\n        background-color: rgb(31, 38, 45);\n        display: grid;\n        grid-template-columns: repeat(10, 1fr);\n        `\n\n        return(\n            <Barra>\n                <div id=\"blockdemyContainer\">\n                    <img id=\"blockdemyIMG\" alt=\"blockdemy\"src=\"https://ernestognw.github.io/rick-and-morty-random/static/media/logo-white.fab45c5f.svg\"></img>\n                </div>\n            </Barra>\n        );\n    }\n}\n\nexport default Nav;","import gql from 'graphql-tag';\n\nconst QueryChar = gql`query oneCharacter($id: ID = 4) {\n  character(id: $id) {\n    name\n    id\n    status\n    species\n    gender\n    type\n    created\n    origin{\n      name\n    }\n    location{\n      name\n    }\n    image\n  }\n}\n `\n\nexport default QueryChar;","import React from 'react';\nimport '../../node_modules/moment/moment'\nimport moment from '../../node_modules/moment/moment';\nimport styled from 'styled-components'\n\nconst Cards = styled.section`\n@media only screen and (max-width: 700px) {\n  margin: .5em;\n  display: grid;\n  grid-template-rows: repeat(2, 1fr);\n  grid-template-columns: .2fr 1fr .2fr;\n}\n@media only screen and (min-width: 701px) {\n    margin-top: 1em;\n    margin-bottom: 1em;\n    display: grid;\n    grid-template-columns:  .1fr repeat(4, .5fr) repeat(4,.6fr) .2fr ;\n  }\n`\n\nconst ImgCard = styled.div`\n@media only screen and (max-width: 700px) {\n    grid-column: 2/3;\n    grid-row: 1/2;\n    justify-content: center;\n    display:flex;\n    width: 1fr;\n  }\n@media only screen and (min-width: 701px) {\n    grid-column: 1/6;\n    justify-content: center;\n    display:flex;\n    width: 1fr;\n  }\n`\n\nconst ImgChar = styled.img`\n@media only screen and (max-width: 700px) {\n    width: 100%;\n    height: auto;\n    min-width: 300px;\n  }\n@media only screen and (min-width: 701px) {\n    width: auto;\n    height: 100%;\n  }\n  box-shadow: rgba(136, 152, 170, 0.30) 0px 0px 2rem 0px;\n`\n\nconst DataCard = styled.div`\n@media only screen and (max-width: 700px) {\n    grid-row: 2/3;\n    grid-column: 2/3;\n    width: 1fr;\n    display: block;\n  }\n@media only screen and (min-width: 701px) {\n    grid-column: 6/10;\n    display: flex;\n    width: 1fr;\n    justify-content: center;\n    display: block;\n  }\n  \n  font-size: 16px;\n  font-family: Play,sans-serif;\n  background-color:rgb(255, 255, 255);\n  box-shadow: rgba(136, 152, 170, 0.30) 0px 0px 2rem 0px;\n  padding-left: .5em;\n\n`\n\nclass Card extends React.Component {\n    render(){\n        return(\n            <Cards>\n                <ImgCard>\n                    \n                        <ImgChar alt={this.props.name} src= {this.props.image}/>\n                    \n                </ImgCard>\n                <DataCard>\n                    <h2>{this.props.name}</h2>\n                    <p><span>Character ID:</span>   {this.props.IDC}</p>\n                    <hr></hr>\n                    <p><span>Status:</span>     {this.props.status}</p>\n                    <hr></hr>\n                    <p><span>Specie:</span>     {this.props.specie}</p>\n                    <hr></hr>\n                    <p><span>Gender:</span>     {this.props.gender}</p>\n                    <hr></hr>\n                    <p><span>Origin:</span>     {this.props.origin}</p>\n                    <hr></hr>\n                    <p><span>Location:</span>   {this.props.location}</p>\n                    <hr></hr>\n                    <p><span>Type:</span>       {this.props.type}</p>\n                    <hr></hr>\n                    <p><span>Created at:</span> {moment(this.props.created).format('MMM Do YYYY')}</p>\n                </DataCard>\n\n            </Cards>\n        );\n    }\n\n}\n\nexport default Card;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Card from './Card';\nimport styled from 'styled-components';\n\n\nconst CardHistory = styled.div`\n@media only screen and (min-width: 701px) {\n  display: grid;\n  grid-template-columns: 2fr 4fr 2fr;\n  width: auto;\n  height: 250px;\n  margin: 1em;  \n  background-color:rgb(255, 255, 255);\n  box-shadow: rgba(136, 152, 170, 0.30) 0px 0px 2rem 0px;\n}\n`\n\nconst ImgCardHContainer = styled.div`\n  margin-top: .05em;\n  width: auto;\n  height: 90%;\n  display: flex;\n  justify-content: center;\n`\n\nconst ImgCardHistory = styled.img`\n  grid-column: 1/2;\n  width: auto;\n  height: 90%;\n`\n\nconst DataCardHistory = styled.div`\n  grid-column: 2/3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: auto;\n  height: 100%;\n  font-size: 25px;\n`\n\nconst PCardHistory = styled.p`\n    padding-bottom: 2.5em;\n`\nconst ButtonCardHContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n`\n\nconst Button = styled.button`\n  /* color: ${props => props.theme.fg};\n  border: solid ${props => props.theme.fg};\n  background: ${props => props.theme.bg}; */\n\n  background: ${props => props.primary ? \"transparent\" : \"white\"};\n  color: ${props => props.primary ? \"rgb(130, 101, 252)\" : \"palevioletred\"};\n  border: solid ${props => props.primary ? \"rgb(130, 101, 252)\" : \"palevioletred\"};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 12px;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  border-radius: 5px;\n  padding: 0.625rem 2.25rem;\n  border-width: 1px;\n  margin-bottom: 5em;\n`;\n\nclass ListChars extends React.Component{\n    render(){\n        let chars = this.props.list;\n        const handleCLick = (i) =>{\n            ReactDOM.render(<Card   name= {chars[i].name} \n                                    image = {chars[i].image}\n                                    IDC = {chars[i].id}\n                                    status = {chars[i].status}\n                                    specie = {chars[i].sapecie}\n                                    gender = {chars[i].gender}\n                                    origin = {chars[i].origin.name}\n                                    location = {chars[i].location.name}\n                                    type = {chars[i].type}\n                                    created = {chars[i].created}\n                \n            />, document.getElementById('card'));\n\n        }\n        return chars.map( (char,i) => \n        <CardHistory key={char.id + 10} >\n            <ImgCardHContainer>\n                <ImgCardHistory key={\"key\"+ char.id }alt={char.name} src= {char.image}/>\n            </ImgCardHContainer>\n            <DataCardHistory>\n                <PCardHistory key={char.name}>{char.name}</PCardHistory>\n                \n            </DataCardHistory>\n            <ButtonCardHContainer>\n                <a href=\"#cardScroll\">\n                    <Button primary key={char} id={i+1} onClick={()=> handleCLick(i)}>view</Button>\n                </a>\n            </ButtonCardHContainer>\n        </CardHistory>\n            );\n    }\n}\n\nexport default ListChars;","import React from 'react';\n\nclass Message extends React.Component{\n    render(){\n        return(\n                <h1>{this.props.message}</h1>\n        );\n    }\n}\n\nexport default Message;","import React from 'react';\nimport { withApollo } from 'react-apollo';\nimport ReactDOM from 'react-dom';\nimport styled, { ThemeProvider } from 'styled-components';\n\n\nimport QueryChar from './querys/QueryChar'\nimport Card from './Card';\nimport ListChars from './ListChars';\nimport Message from './Message';\n\nconst ButtonGenContainer = styled.div`\n  margin-left: 5em;\n  margin-right: 5em;\n`\nconst History = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 3em;\n`\nconst ButtonGen = styled.button`\n  color: ${props => props.theme.fg};\n  border: solid ${props => props.theme.fg};\n  background: ${props => props.theme.bg};\n\n  cursor: pointer;\n  font-weight: 600;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  margin-top: 20px;\n  margin-left: auto;\n  border-radius: 5px;\n  border-width: initial;\n  border-style: none;\n  border-color: initial;\n  border-image: initial;\n  padding: 0.875rem 2rem;\n`;\n\n\nconst theme = {\n  fg: \" rgb(255, 255, 255)\",\n  bg: \"linear-gradient(135deg, rgb(48, 206, 231), rgb(130, 101, 252))\"\n}\n\nlet varQ = {\"id\": 1}\nlet characters = [];\nfunction CardChar({ client }) {\n  \n    const handleClick= () =>{\n    let x = Math.floor((Math.random() * 493) + 1);\n    if(x < 100){\n      varQ.id = \"5d299c853d1d85c017cc3e\" + x;\n    }else{\n      varQ.id = \"5d299c853d1d85c017cc3\" + x\n    }\n    client.query({query: QueryChar, variables: varQ }).then(e => {\n        if(e.loading ===  false){\n          ReactDOM.render(<h1>Loading...</h1>,document.getElementById('card'));\n        }\n        let character = e.data.character;\n        character.id = x;\n        if(character.origin === null){\n          character.origin = {\n            name: \"Unknown\"\n          }\n        }\n        if(character.location === null){\n          character.location = {\n            name: \"Unknown\"\n          }\n        }\n        characters.push(character);\n    \n        if(document.getElementById('message')){\n        document.getElementById('message').parentNode.removeChild(document.getElementById('message'));\n        document.getElementById('messageH').parentNode.removeChild(document.getElementById('messageH'));\n        }\n        ReactDOM.render(<Card   name= {character.name}\n                                image = {character.image} \n                                IDC = {character.id}\n                                status = {character.status}\n                                specie = {character.species}\n                                gender = {character.gender}\n                                origin = {character.origin.name}\n                                location = {character.location.name}\n                                type = {character.type}\n                                created = {character.created}\n        />, document.getElementById('card'));\n\n        \n\n        \n\n        ReactDOM.render(<ListChars list= {characters}/>,document.getElementById('list'));\n    })}\n\n   \n    return (\n      \n      <div>\n        <scroll-container>\n          <scroll-page id=\"cardScroll\">\n            <ButtonGenContainer>\n            <ThemeProvider theme={theme}>\n              <ButtonGen onClick={handleClick} id=\"genButton\">Generate</ButtonGen>\n            </ThemeProvider>\n            </ButtonGenContainer>\n            <div id=\"message\">\n              <Message message=\"No se ha generado nungún personaje.\"></Message>\n            </div>\n            <div id= \"card\"></div>\n          </scroll-page>       \n          <History>\n            <h2>History</h2>\n          </History>\n          <div id=\"messageH\">\n            <Message message=\"No hay historial.\"></Message>\n          </div>\n          <div id=\"list\"></div>\n        </scroll-container>\n    </div>\n\n    )\n  }\n\n  \n  \n  export default withApollo(CardChar);","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport {createGlobalStyle} from 'styled-components';\n\nimport Nav from './components/Nav';\nimport CardChar from './components/CardChar';\n\nconst client = new ApolloClient({\n  uri: \"http://rickandmorty.blockchainacademy.mx:8000/graphql\"\n});\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n    \n}\n\n#blockdemyContainer{\n  display: flex;\n  grid-column: 2/4;\n}\n#blockdemyIMG {\n  height: 45px;\n  margin-top: 10px;\n}\n\nscroll-container {\n  overflow-y: scroll;\n  scroll-behavior: smooth;\n}\n\n\nhr{\n  border-width: 0.5px;\n  border-style: solid;\n  border-color: rgb(236, 237, 239);\n  border-image: initial;\n}\nspan{\n  font-weight: bold;\n  margin-right: auto;\n  padding-left: 1.5em;\n\n}\n#message, #messageH{\n  display: flex;\n  justify-content: center;\n  margin: 9em;\n}\n#messageH{\n  margin: 4em;\n}\n\n#list{\n  margin-bottom: 2em;\n}\n\n`\n\nfunction App() {\n  \n  return (\n    \n    <ApolloProvider client= {client}>\n      <GlobalStyle/>\n      <div className=\"App\">\n        <div >\n          <Nav></Nav>\n        </div>\n        <div>\n        <CardChar id=\"CardChar\"/>\n        </div>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}